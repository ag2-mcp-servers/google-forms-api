# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:09:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class Type(Enum):
    CHOICE_TYPE_UNSPECIFIED = 'CHOICE_TYPE_UNSPECIFIED'
    RADIO = 'RADIO'
    CHECKBOX = 'CHECKBOX'
    DROP_DOWN = 'DROP_DOWN'


class CloudPubsubTopic(BaseModel):
    topicName: Optional[str] = Field(
        None,
        description='Required. A fully qualified Pub/Sub topic name to publish the events to. This topic must be owned by the calling project and already exist in Pub/Sub.',
    )


class CorrectAnswer(BaseModel):
    value: Optional[str] = Field(
        None,
        description='Required. The correct answer value. See the documentation for TextAnswer.value for details on how various value types are formatted.',
    )


class CorrectAnswers(BaseModel):
    answers: Optional[List[CorrectAnswer]] = Field(
        None,
        description='A list of correct answers. A quiz response can be automatically graded based on these answers. For single-valued questions, a response is marked correct if it matches any value in this list (in other words, multiple correct answers are possible). For multiple-valued (`CHECKBOX`) questions, a response is marked correct if it contains exactly the values in this list.',
    )


class CreateItemResponse(BaseModel):
    itemId: Optional[str] = Field(None, description='The ID of the created item.')
    questionId: Optional[List[str]] = Field(
        None,
        description='The ID of the question created as part of this item, for a question group it lists IDs of all the questions created for this item.',
    )


class DateQuestion(BaseModel):
    includeTime: Optional[bool] = Field(
        None, description='Whether to include the time as part of the question.'
    )
    includeYear: Optional[bool] = Field(
        None, description='Whether to include the year as part of the question.'
    )


class Empty(BaseModel):
    pass


class FileUploadAnswer(BaseModel):
    fileId: Optional[str] = Field(
        None, description='Output only. The ID of the Google Drive file.'
    )
    fileName: Optional[str] = Field(
        None,
        description='Output only. The file name, as stored in Google Drive on upload.',
    )
    mimeType: Optional[str] = Field(
        None,
        description='Output only. The MIME type of the file, as stored in Google Drive on upload.',
    )


class FileUploadAnswers(BaseModel):
    answers: Optional[List[FileUploadAnswer]] = Field(
        None, description='Output only. All submitted files for a FileUpload question.'
    )


class Type1(Enum):
    FILE_TYPE_UNSPECIFIED = 'FILE_TYPE_UNSPECIFIED'
    ANY = 'ANY'
    DOCUMENT = 'DOCUMENT'
    PRESENTATION = 'PRESENTATION'
    SPREADSHEET = 'SPREADSHEET'
    DRAWING = 'DRAWING'
    PDF = 'PDF'
    IMAGE = 'IMAGE'
    VIDEO = 'VIDEO'
    AUDIO = 'AUDIO'


class FileUploadQuestion(BaseModel):
    folderId: Optional[str] = Field(
        None,
        description='Required. The ID of the Drive folder where uploaded files are stored.',
    )
    maxFileSize: Optional[str] = Field(
        None,
        description='Maximum number of bytes allowed for any single file uploaded to this question.',
    )
    maxFiles: Optional[int] = Field(
        None,
        description='Maximum number of files that can be uploaded for this question in a single response.',
    )
    types: Optional[List[Type1]] = Field(
        None, description='File types accepted by this question.'
    )


class Info(BaseModel):
    description: Optional[str] = Field(None, description='The description of the form.')
    documentTitle: Optional[str] = Field(
        None,
        description='Output only. The title of the document which is visible in Drive. If `Info.title` is empty, `document_title` may appear in its place in the Google Forms UI and be visible to responders. `document_title` can be set on create, but cannot be modified by a batchUpdate request. Please use the [Google Drive API](https://developers.google.com/drive/api/v3/reference/files/update) if you need to programmatically update `document_title`.',
    )
    title: Optional[str] = Field(
        None,
        description='Required. The title of the form which is visible to responders.',
    )


class Location(BaseModel):
    index: Optional[int] = Field(
        None,
        description='The index of an item in the form. This must be in the range [0..*N*), where *N* is the number of items in the form.',
    )


class Alignment(Enum):
    ALIGNMENT_UNSPECIFIED = 'ALIGNMENT_UNSPECIFIED'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    CENTER = 'CENTER'


class MediaProperties(BaseModel):
    alignment: Optional[Alignment] = Field(None, description='Position of the media.')
    width: Optional[int] = Field(
        None,
        description='The width of the media in pixels. When the media is displayed, it is scaled to the smaller of this value or the width of the displayed form. The original aspect ratio of the media is preserved. If a width is not specified when the media is added to the form, it is set to the width of the media source. Width must be between 0 and 740, inclusive. Setting width to 0 or unspecified is only permitted when updating the media source.',
    )


class MoveItemRequest(BaseModel):
    newLocation: Optional[Location] = Field(
        None, description='Required. The new location for the item.'
    )
    originalLocation: Optional[Location] = Field(
        None, description='Required. The location of the item to move.'
    )


class GoToAction(Enum):
    GO_TO_ACTION_UNSPECIFIED = 'GO_TO_ACTION_UNSPECIFIED'
    NEXT_SECTION = 'NEXT_SECTION'
    RESTART_FORM = 'RESTART_FORM'
    SUBMIT_FORM = 'SUBMIT_FORM'


class PageBreakItem(BaseModel):
    pass


class QuizSettings(BaseModel):
    isQuiz: Optional[bool] = Field(
        None,
        description='Whether this form is a quiz or not. When true, responses are graded based on question Grading. Upon setting to false, all question Grading is deleted.',
    )


class RenewWatchRequest(BaseModel):
    pass


class Response(BaseModel):
    createItem: Optional[CreateItemResponse] = Field(
        None, description='The result of creating an item.'
    )


class RowQuestion(BaseModel):
    title: Optional[str] = Field(
        None,
        description='Required. The title for the single row in the QuestionGroupItem.',
    )


class ScaleQuestion(BaseModel):
    high: Optional[int] = Field(
        None, description='Required. The highest possible value for the scale.'
    )
    highLabel: Optional[str] = Field(
        None,
        description='The label to display describing the highest point on the scale.',
    )
    low: Optional[int] = Field(
        None, description='Required. The lowest possible value for the scale.'
    )
    lowLabel: Optional[str] = Field(
        None,
        description='The label to display describing the lowest point on the scale.',
    )


class TextAnswer(BaseModel):
    value: Optional[str] = Field(
        None,
        description='Output only. The answer value. Formatting used for different kinds of question: * ChoiceQuestion * `RADIO` or `DROP_DOWN`: A single string corresponding to the option that was selected. * `CHECKBOX`: Multiple strings corresponding to each option that was selected. * TextQuestion: The text that the user entered. * ScaleQuestion: A string containing the number that was selected. * DateQuestion * Without time or year: MM-DD e.g. "05-19" * With year: YYYY-MM-DD e.g. "1986-05-19" * With time: MM-DD HH:MM e.g. "05-19 14:51" * With year and time: YYYY-MM-DD HH:MM e.g. "1986-05-19 14:51" * TimeQuestion: String with time or duration in HH:MM format e.g. "14:51" * RowQuestion within QuestionGroupItem: The answer for each row of a QuestionGroupItem is represented as a separate Answer. Each will contain one string for `RADIO`-type choices or multiple strings for `CHECKBOX` choices.',
    )


class TextAnswers(BaseModel):
    answers: Optional[List[TextAnswer]] = Field(
        None,
        description='Output only. Answers to a question. For multiple-value ChoiceQuestions, each answer is a separate value.',
    )


class TextItem(BaseModel):
    pass


class TextLink(BaseModel):
    displayText: Optional[str] = Field(
        None, description='Required. Display text for the URI.'
    )
    uri: Optional[str] = Field(None, description='Required. The URI.')


class TextQuestion(BaseModel):
    paragraph: Optional[bool] = Field(
        None,
        description='Whether the question is a paragraph question or not. If not, the question is a short text question.',
    )


class TimeQuestion(BaseModel):
    duration: Optional[bool] = Field(
        None,
        description='`true` if the question is about an elapsed time. Otherwise it is about a time of day.',
    )


class UpdateFormInfoRequest(BaseModel):
    info: Optional[Info] = Field(None, description='The info to update.')
    updateMask: Optional[str] = Field(
        None,
        description='Required. Only values named in this mask are changed. At least one field must be specified. The root `info` is implied and should not be specified. A single `"*"` can be used as short-hand for updating every field.',
    )


class Video(BaseModel):
    properties: Optional[MediaProperties] = Field(
        None, description='Properties of a video.'
    )
    youtubeUri: Optional[str] = Field(None, description='Required. A YouTube URI.')


class VideoItem(BaseModel):
    caption: Optional[str] = Field(
        None, description='The text displayed below the video.'
    )
    video: Optional[Video] = Field(
        None, description='Required. The video displayed in the item.'
    )


class VideoLink(BaseModel):
    displayText: Optional[str] = Field(
        None, description='Required. The display text for the link.'
    )
    youtubeUri: Optional[str] = Field(None, description='The URI of a YouTube video.')


class ErrorType(Enum):
    ERROR_TYPE_UNSPECIFIED = 'ERROR_TYPE_UNSPECIFIED'
    PROJECT_NOT_AUTHORIZED = 'PROJECT_NOT_AUTHORIZED'
    NO_USER_ACCESS = 'NO_USER_ACCESS'
    OTHER_ERRORS = 'OTHER_ERRORS'


class EventType(Enum):
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    SCHEMA = 'SCHEMA'
    RESPONSES = 'RESPONSES'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'


class WatchTarget(BaseModel):
    topic: Optional[CloudPubsubTopic] = Field(
        None,
        description='A Pub/Sub topic. To receive notifications, the topic must grant publish privileges to the Forms service account `serviceAccount:forms-notifications@system.gserviceaccount.com`. Only the project that owns a topic may create a watch with it. Pub/Sub delivery guarantees should be considered.',
    )


class WriteControl(BaseModel):
    requiredRevisionId: Optional[str] = Field(
        None,
        description='The revision ID of the form that the write request is applied to. If this is not the latest revision of the form, the request is not processed and returns a 400 bad request error.',
    )
    targetRevisionId: Optional[str] = Field(
        None,
        description='The target revision ID of the form that the write request is applied to. If changes have occurred after this revision, the changes in this update request are transformed against those changes. This results in a new revision of the form that incorporates both the changes in the request and the intervening changes, with the server resolving conflicting changes. The target revision ID may only be used to write to recent versions of a form. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 (Bad Request Error). The request may be retried after reading the latest version of the form. In most cases a target revision ID remains valid for several minutes after it is read, but for frequently-edited forms this window may be shorter.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class DeleteItemRequest(BaseModel):
    location: Optional[Location] = Field(
        None, description='Required. The location of the item to delete.'
    )


class ExtraMaterial(BaseModel):
    link: Optional[TextLink] = Field(None, description='Text feedback.')
    video: Optional[VideoLink] = Field(None, description='Video feedback.')


class Feedback(BaseModel):
    material: Optional[List[ExtraMaterial]] = Field(
        None,
        description='Additional information provided as part of the feedback, often used to point the respondent to more reading and resources.',
    )
    text: Optional[str] = Field(
        None, description='Required. The main text of the feedback.'
    )


class FormSettings(BaseModel):
    quizSettings: Optional[QuizSettings] = Field(
        None, description='Settings related to quiz forms and grading.'
    )


class Grade(BaseModel):
    correct: Optional[bool] = Field(
        None,
        description='Output only. Whether the question was answered correctly or not. A zero-point score is not enough to infer incorrectness, since a correctly answered question could be worth zero points.',
    )
    feedback: Optional[Feedback] = Field(
        None, description='Output only. Additional feedback given for an answer.'
    )
    score: Optional[float] = Field(
        None, description='Output only. The numeric score awarded for the answer.'
    )


class Grading(BaseModel):
    correctAnswers: Optional[CorrectAnswers] = Field(
        None,
        description='Required. The answer key for the question. Responses are automatically graded based on this field.',
    )
    generalFeedback: Optional[Feedback] = Field(
        None,
        description="The feedback displayed for all answers. This is commonly used for short answer questions when a quiz owner wants to quickly give respondents some sense of whether they answered the question correctly before they've had a chance to officially grade the response. General feedback cannot be set for automatically graded multiple choice questions.",
    )
    pointValue: Optional[int] = Field(
        None,
        description='Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.',
    )
    whenRight: Optional[Feedback] = Field(
        None,
        description='The feedback displayed for correct responses. This feedback can only be set for multiple choice questions that have correct answers provided.',
    )
    whenWrong: Optional[Feedback] = Field(
        None,
        description='The feedback displayed for incorrect responses. This feedback can only be set for multiple choice questions that have correct answers provided.',
    )


class Image(BaseModel):
    altText: Optional[str] = Field(
        None,
        description='A description of the image that is shown on hover and read by screenreaders.',
    )
    contentUri: Optional[str] = Field(
        None,
        description='Output only. A URI from which you can download the image; this is valid only for a limited time.',
    )
    properties: Optional[MediaProperties] = Field(
        None, description='Properties of an image.'
    )
    sourceUri: Optional[str] = Field(
        None,
        description='Input only. The source URI is the URI used to insert the image. The source URI can be empty when fetched.',
    )


class ImageItem(BaseModel):
    image: Optional[Image] = Field(
        None, description='Required. The image displayed in the item.'
    )


class Option(BaseModel):
    goToAction: Optional[GoToAction] = Field(
        None, description='Section navigation type.'
    )
    goToSectionId: Optional[str] = Field(
        None, description='Item ID of section header to go to.'
    )
    image: Optional[Image] = Field(None, description='Display image as an option.')
    isOther: Optional[bool] = Field(
        None,
        description='Whether the option is "other". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.',
    )
    value: Optional[str] = Field(
        None, description='Required. The choice as presented to the user.'
    )


class UpdateSettingsRequest(BaseModel):
    settings: Optional[FormSettings] = Field(
        None, description='Required. The settings to update with.'
    )
    updateMask: Optional[str] = Field(
        None,
        description='Required. Only values named in this mask are changed. At least one field must be specified. The root `settings` is implied and should not be specified. A single `"*"` can be used as short-hand for updating every field.',
    )


class Watch(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp of when this was created.'
    )
    errorType: Optional[ErrorType] = Field(
        None,
        description='Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.',
    )
    eventType: Optional[EventType] = Field(
        None, description='Required. Which event type to watch for.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.',
    )
    id: Optional[str] = Field(
        None,
        description='Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.',
    )
    state: Optional[State] = Field(
        None,
        description='Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.',
    )
    target: Optional[WatchTarget] = Field(
        None, description='Required. Where to send the notification.'
    )


class Answer(BaseModel):
    fileUploadAnswers: Optional[FileUploadAnswers] = Field(
        None, description='Output only. The answers to a file upload question.'
    )
    grade: Optional[Grade] = Field(
        None,
        description='Output only. The grade for the answer if the form was a quiz.',
    )
    questionId: Optional[str] = Field(
        None,
        description="Output only. The question's ID. See also Question.question_id.",
    )
    textAnswers: Optional[TextAnswers] = Field(
        None, description='Output only. The specific answers as text.'
    )


class ChoiceQuestion(BaseModel):
    options: Optional[List[Option]] = Field(
        None,
        description='Required. List of options that a respondent must choose from.',
    )
    shuffle: Optional[bool] = Field(
        None,
        description="Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.",
    )
    type: Optional[Type] = Field(
        None, description='Required. The type of choice question.'
    )


class CreateWatchRequest(BaseModel):
    watch: Optional[Watch] = Field(
        None,
        description='Required. The watch object. No ID should be set on this object; use `watch_id` instead.',
    )
    watchId: Optional[str] = Field(
        None,
        description='The ID to use for the watch. If specified, the ID must not already be in use. If not specified, an ID is generated. This value should be 4-63 characters, and valid characters are /a-z-/.',
    )


class FormResponse(BaseModel):
    answers: Optional[Dict[str, Answer]] = Field(
        None,
        description='Output only. The actual answers to the questions, keyed by question_id.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp for the first time the response was submitted.',
    )
    formId: Optional[str] = Field(None, description='Output only. The form ID.')
    lastSubmittedTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp for the most recent time the response was submitted. Does not track changes to grades.',
    )
    respondentEmail: Optional[str] = Field(
        None,
        description='Output only. The email address (if collected) for the respondent.',
    )
    responseId: Optional[str] = Field(None, description='Output only. The response ID.')
    totalScore: Optional[float] = Field(
        None,
        description='Output only. The total number of points the respondent received for their submission Only set if the form was a quiz and the response was graded. This includes points automatically awarded via autograding adjusted by any manual corrections entered by the form owner.',
    )


class Grid(BaseModel):
    columns: Optional[ChoiceQuestion] = Field(
        None,
        description='Required. The choices shared by each question in the grid. In other words, the values of the columns. Only `CHECK_BOX` and `RADIO` choices are allowed.',
    )
    shuffleQuestions: Optional[bool] = Field(
        None,
        description='If `true`, the questions are randomly ordered. In other words, the rows appear in a different order for every respondent.',
    )


class ListFormResponsesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If set, there are more responses. To get the next page of responses, provide this as `page_token` in a future request.',
    )
    responses: Optional[List[FormResponse]] = Field(
        None,
        description='The returned form responses. Note: The `formId` field is not returned in the `FormResponse` object for list requests.',
    )


class ListWatchesResponse(BaseModel):
    watches: Optional[List[Watch]] = Field(None, description='The returned watches.')


class Question(BaseModel):
    choiceQuestion: Optional[ChoiceQuestion] = Field(
        None, description='A respondent can choose from a pre-defined set of options.'
    )
    dateQuestion: Optional[DateQuestion] = Field(
        None, description='A respondent can enter a date.'
    )
    fileUploadQuestion: Optional[FileUploadQuestion] = Field(
        None, description='A respondent can upload one or more files.'
    )
    grading: Optional[Grading] = Field(
        None, description='Grading setup for the question.'
    )
    questionId: Optional[str] = Field(
        None,
        description='Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.',
    )
    required: Optional[bool] = Field(
        None,
        description='Whether the question must be answered in order for a respondent to submit their response.',
    )
    rowQuestion: Optional[RowQuestion] = Field(
        None, description='A row of a QuestionGroupItem.'
    )
    scaleQuestion: Optional[ScaleQuestion] = Field(
        None, description='A respondent can choose a number from a range.'
    )
    textQuestion: Optional[TextQuestion] = Field(
        None, description='A respondent can enter a free text response.'
    )
    timeQuestion: Optional[TimeQuestion] = Field(
        None, description='A respondent can enter a time.'
    )


class QuestionGroupItem(BaseModel):
    grid: Optional[Grid] = Field(
        None,
        description='The question group is a grid with rows of multiple choice questions that share the same options. When `grid` is set, all questions in the group must be of kind `row`.',
    )
    image: Optional[Image] = Field(
        None,
        description='The image displayed within the question group above the specific questions.',
    )
    questions: Optional[List[Question]] = Field(
        None,
        description='Required. A list of questions that belong in this question group. A question must only belong to one group. The `kind` of the group may affect what types of questions are allowed.',
    )


class QuestionItem(BaseModel):
    image: Optional[Image] = Field(
        None, description='The image displayed within the question.'
    )
    question: Optional[Question] = Field(
        None, description='Required. The displayed question.'
    )


class Item(BaseModel):
    description: Optional[str] = Field(None, description='The description of the item.')
    imageItem: Optional[ImageItem] = Field(
        None, description='Displays an image on the page.'
    )
    itemId: Optional[str] = Field(
        None,
        description='The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.',
    )
    pageBreakItem: Optional[PageBreakItem] = Field(
        None, description='Starts a new page with a title.'
    )
    questionGroupItem: Optional[QuestionGroupItem] = Field(
        None,
        description='Poses one or more questions to the user with a single major prompt.',
    )
    questionItem: Optional[QuestionItem] = Field(
        None, description='Poses a question to the user.'
    )
    textItem: Optional[TextItem] = Field(
        None, description='Displays a title and description on the page.'
    )
    title: Optional[str] = Field(None, description='The title of the item.')
    videoItem: Optional[VideoItem] = Field(
        None, description='Displays a video on the page.'
    )


class UpdateItemRequest(BaseModel):
    item: Optional[Item] = Field(
        None,
        description='Required. New values for the item. Note that item and question IDs are used if they are provided (and are in the field mask). If an ID is blank (and in the field mask) a new ID is generated. This means you can modify an item by getting the form via forms.get, modifying your local copy of that item to be how you want it, and using UpdateItemRequest to write it back, with the IDs being the same (or not in the field mask).',
    )
    location: Optional[Location] = Field(
        None, description='Required. The location identifying the item to update.'
    )
    updateMask: Optional[str] = Field(
        None, description='Required. Only values named in this mask are changed.'
    )


class CreateItemRequest(BaseModel):
    item: Optional[Item] = Field(None, description='Required. The item to create.')
    location: Optional[Location] = Field(
        None, description='Required. Where to place the new item.'
    )


class Form(BaseModel):
    formId: Optional[str] = Field(None, description='Output only. The form ID.')
    info: Optional[Info] = Field(
        None, description='Required. The title and description of the form.'
    )
    items: Optional[List[Item]] = Field(
        None,
        description="Required. A list of the form's items, which can include section headers, questions, embedded media, etc.",
    )
    linkedSheetId: Optional[str] = Field(
        None,
        description='Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).',
    )
    responderUri: Optional[str] = Field(
        None,
        description='Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.',
    )
    revisionId: Optional[str] = Field(
        None,
        description='Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.',
    )
    settings: Optional[FormSettings] = Field(
        None,
        description="The form's settings. This must be updated with UpdateSettingsRequest; it is ignored during `forms.create` and UpdateFormInfoRequest.",
    )


class Request(BaseModel):
    createItem: Optional[CreateItemRequest] = Field(
        None, description='Create a new item.'
    )
    deleteItem: Optional[DeleteItemRequest] = Field(None, description='Delete an item.')
    moveItem: Optional[MoveItemRequest] = Field(
        None, description='Move an item to a specified location.'
    )
    updateFormInfo: Optional[UpdateFormInfoRequest] = Field(
        None, description="Update Form's Info."
    )
    updateItem: Optional[UpdateItemRequest] = Field(None, description='Update an item.')
    updateSettings: Optional[UpdateSettingsRequest] = Field(
        None, description="Updates the Form's settings."
    )


class BatchUpdateFormRequest(BaseModel):
    includeFormInResponse: Optional[bool] = Field(
        None,
        description='Whether to return an updated version of the model in the response.',
    )
    requests: Optional[List[Request]] = Field(
        None, description='Required. The update requests of this batch.'
    )
    writeControl: Optional[WriteControl] = Field(
        None, description='Provides control over how write requests are executed.'
    )


class BatchUpdateFormResponse(BaseModel):
    form: Optional[Form] = Field(
        None,
        description='Based on the bool request field `include_form_in_response`, a form with all applied mutations/updates is returned or not. This may be later than the revision ID created by these changes.',
    )
    replies: Optional[List[Response]] = Field(
        None,
        description='The reply of the updates. This maps 1:1 with the update requests, although replies to some requests may be empty.',
    )
    writeControl: Optional[WriteControl] = Field(
        None, description='The updated write control after applying the request.'
    )
